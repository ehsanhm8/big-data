HIC_with_mortgage_900 = "B25141_007E",
HIC_with_mortgage_1250 = "B25141_008E",
HIC_with_mortgage_1750 = "B25141_009E",
HIC_with_mortgage_2250 = "B25141_010E",
HIC_with_mortgage_2750 = "B25141_011E",
HIC_with_mortgage_3250 = "B25141_012E",
HIC_with_mortgage_3750 = "B25141_013E",
HIC_with_mortgage_m4000 = "B25141_014E",
HIC_without_mortgage = "B25141_015E",
HIC_without_mortgage_50 = "B25141_016E",
HIC_without_mortgage_200 = "B25141_017E",
HIC_without_mortgage_400 = "B25141_018E",
HIC_without_mortgage_650 = "B25141_019E",
HIC_without_mortgage_900 = "B25141_020E",
HIC_without_mortgage_1250 = "B25141_021E",
HIC_without_mortgage_1750 = "B25141_022E",
HIC_without_mortgage_2250 = "B25141_023E",
HIC_without_mortgage_2750 = "B25141_024E",
HIC_without_mortgage_3250 = "B25141_025E",
HIC_without_mortgage_3750 = "B25141_026E",
HIC_without_mortgage_m4000 = "B25141_027E",
MOR_total = "B25096_001E",
MOR_with = "B25096_002E",
MOR_with_25000 = "B25096_003E",
MOR_with_75000 = "B25096_004E",
MOR_with_125000 = "B25096_005E",
MOR_with_175000 = "B25096_006E",
MOR_with_250000 = "B25096_007E",
MOR_with_400000 = "B25096_008E",
MOR_with_625000 = "B25096_009E",
MOR_with_875000 = "B25096_010E",
MOR_with_m1000000 = "B25096_011E",
MOR_without = "B25096_012E",
MOR_without_25000 = "B25096_013E",
MOR_without_75000 = "B25096_014E",
MOR_without_125000 = "B25096_015E",
MOR_without_175000 = "B25096_016E",
MOR_without_250000 = "B25096_017E",
MOR_without_400000 = "B25096_018E",
MOR_without_625000 = "B25096_019E",
MOR_without_875000 = "B25096_020E",
MOR_without_m1000000 = "B25096_021E"
)
census_data <- get_acs(
geography = "county",
variables = variables,
year = year_tg,
survey = "acs5", # Use 5-year ACS data
output = "wide"
)
################################
# Extract the variable names
variable_columns <- names(variables)
# Keep only the specified variables and the 'NAME' column for county names
census_data <- census_data %>%
select(NAME, all_of(variable_columns))
# Extracting States and creating a new variable
census_data$state <- sub(".*,\\s*", "", census_data$NAME) # Gets everything after the last comma
census_data$county <- sub(",\\s*[^,]*$", "", census_data$NAME) # Gets everything before the last comma
# Then remove "County" if it exists at the end
census_data$county <- sub(" County$", "", census_data$county)
census_data$county <- sub(" Census Area$", "", census_data$county)
census_data$county <- sub(" Municipio$", "", census_data$county)
census_data$county <- sub(" Parish$", "", census_data$county)
census_data$county <- sub(" Borough$", "", census_data$county)
census_data$county <- sub(" Planning Region$", "", census_data$county)
census_data$county <- sub(" city$", "", census_data$county)
# Move state and county back to the front
census_data <- census_data |>
select(county, state, everything()) |>
select(-"NAME")
noaa_data <- read_csv("Data/county_events.csv")
noaa_data <- noaa_data |>
filter(year == 2018 | year == 2023)
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
group_by(state_bad) |>
arrange(county, .by_group = TRUE) |>
ungroup()
head(census_data)
head(noaa_1_county)
nrow(census_data)
nrow(noaa_1_county)
nrow(census_data)
nrow(noaa_1_county)
View(census_data)
View(noaa_1_county)
noaa_2018 <- noaa_1_county |>
filter(year == 2018)
View(noaa_2018)
nrow(noaa_2018)
noaa_2018 <- noaa_1_county |>
filter(year == 2018)
noaa_2023 <- noaa_1_county |>
filter(year == 2023)
nrow(noaa_2018)
nrow(noaa_2023)
View(noaa_1_county)
ncol(noaa_1_county)
knitr::opts_chunk$set(echo = FALSE)
library(tidycensus)
library(dplyr)
library(tidyr)
library(writexl)
library(readr)
library(stringr)
year_tg <- 2023
# Set your Census API key
census_api_key("3504e2e4186afe0b674a6f3f54caefd9ef3af8d9", install = TRUE, overwrite=TRUE)
#census_api_key("34777786635d1f4f42107118005896f09cde55e1", install = TRUE, overwrite=TRUE)
## Use `load_variables()` function to explore more variables if needed
codelists <- load_variables(year_tg, "acs5", cache = TRUE)
#################################################################################
variables <- c(
HIC_total = "B25141_001E",
HIC_with_mortgage = "B25141_002E",
HIC_with_mortgage_50 = "B25141_003E",
HIC_with_mortgage_200 = "B25141_004E",
HIC_with_mortgage_400 = "B25141_005E",
HIC_with_mortgage_650 = "B25141_006E",
HIC_with_mortgage_900 = "B25141_007E",
HIC_with_mortgage_1250 = "B25141_008E",
HIC_with_mortgage_1750 = "B25141_009E",
HIC_with_mortgage_2250 = "B25141_010E",
HIC_with_mortgage_2750 = "B25141_011E",
HIC_with_mortgage_3250 = "B25141_012E",
HIC_with_mortgage_3750 = "B25141_013E",
HIC_with_mortgage_m4000 = "B25141_014E",
HIC_without_mortgage = "B25141_015E",
HIC_without_mortgage_50 = "B25141_016E",
HIC_without_mortgage_200 = "B25141_017E",
HIC_without_mortgage_400 = "B25141_018E",
HIC_without_mortgage_650 = "B25141_019E",
HIC_without_mortgage_900 = "B25141_020E",
HIC_without_mortgage_1250 = "B25141_021E",
HIC_without_mortgage_1750 = "B25141_022E",
HIC_without_mortgage_2250 = "B25141_023E",
HIC_without_mortgage_2750 = "B25141_024E",
HIC_without_mortgage_3250 = "B25141_025E",
HIC_without_mortgage_3750 = "B25141_026E",
HIC_without_mortgage_m4000 = "B25141_027E",
MOR_total = "B25096_001E",
MOR_with = "B25096_002E",
MOR_with_25000 = "B25096_003E",
MOR_with_75000 = "B25096_004E",
MOR_with_125000 = "B25096_005E",
MOR_with_175000 = "B25096_006E",
MOR_with_250000 = "B25096_007E",
MOR_with_400000 = "B25096_008E",
MOR_with_625000 = "B25096_009E",
MOR_with_875000 = "B25096_010E",
MOR_with_m1000000 = "B25096_011E",
MOR_without = "B25096_012E",
MOR_without_25000 = "B25096_013E",
MOR_without_75000 = "B25096_014E",
MOR_without_125000 = "B25096_015E",
MOR_without_175000 = "B25096_016E",
MOR_without_250000 = "B25096_017E",
MOR_without_400000 = "B25096_018E",
MOR_without_625000 = "B25096_019E",
MOR_without_875000 = "B25096_020E",
MOR_without_m1000000 = "B25096_021E"
)
census_data <- get_acs(
geography = "county",
variables = variables,
year = year_tg,
survey = "acs5", # Use 5-year ACS data
output = "wide"
)
################################
# Extract the variable names
variable_columns <- names(variables)
# Keep only the specified variables and the 'NAME' column for county names
census_data <- census_data %>%
select(NAME, all_of(variable_columns))
# Extracting States and creating a new variable
census_data$state <- sub(".*,\\s*", "", census_data$NAME) # Gets everything after the last comma
census_data$county <- sub(",\\s*[^,]*$", "", census_data$NAME) # Gets everything before the last comma
# Then remove "County" if it exists at the end
census_data$county <- sub(" County$", "", census_data$county)
census_data$county <- sub(" Census Area$", "", census_data$county)
census_data$county <- sub(" Municipio$", "", census_data$county)
census_data$county <- sub(" Parish$", "", census_data$county)
census_data$county <- sub(" Borough$", "", census_data$county)
census_data$county <- sub(" Planning Region$", "", census_data$county)
census_data$county <- sub(" city$", "", census_data$county)
# Move state and county back to the front
census_data <- census_data |>
select(county, state, everything()) |>
select(-"NAME")
noaa_data <- read_csv("Data/county_events.csv")
noaa_data <- noaa_data |>
filter(year == 2018 | year == 2023)
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
mutate(total_events = sum(
"heavy snow", "high wind", "thunderstorm wind", "tornado",
"tropical depression", "winter storm"
)) |>
group_by(state_bad) |>
arrange(county, .by_group = TRUE) |>
ungroup() |>
select(county, state_bad, year, total_events, everything())
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
mutate(total_events = rowSums(across(where(is.numeric == TRUE)))) |>
group_by(state_bad) |>
arrange(county, .by_group = TRUE) |>
ungroup() |>
select(county, state_bad, year, total_events, everything())
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
mutate(total_events = rowSums(across(where(is.numeric)))) |>
group_by(state_bad) |>
arrange(county, .by_group = TRUE) |>
ungroup() |>
select(county, state_bad, year, total_events, everything())
head(census_data)
head(noaa_1_county)
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
mutate(total_events = rowSums(across(where(is.numeric & (!2018 & !2023))))) |>
group_by(state_bad) |>
arrange(county, .by_group = TRUE) |>
ungroup() |>
select(county, state_bad, year, total_events, everything())
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
mutate(total_events = rowSums(across(where(is.numeric & < 100)))) |>
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
mutate(total_events = rowSums(across(where(is.numeric & << 100)))) |>
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
mutate(total_events = rowSums(across(where(is.numeric)))) |>
group_by(state_bad) |>
arrange(county, .by_group = TRUE) |>
ungroup() |>
select(county, state_bad, year, total_events, everything())
head(census_data)
head(noaa_1_county)
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
mutate(total_events = rowSums(across(where(is.numeric))) - year) |>
group_by(state_bad) |>
arrange(county, .by_group = TRUE) |>
ungroup() |>
select(county, state_bad, year, total_events, everything())
head(census_data)
head(noaa_1_county)
noaa_2018 <- noaa_1_county |>
filter(year == 2018) |>
noaa_2023 <- noaa_1_county |>
filter(year == 2023)
noaa_2018 <- noaa_1_county |>
filter(year == 2018)
noaa_2023 <- noaa_1_county |>
filter(year == 2023)
nrow(noaa_2018)
nrow(noaa_2023)
noaa_2018 <- noaa_1_county |>
filter(year == 2018)
noaa_2023 <- noaa_1_county |>
filter(year == 2023)
print("Counties in 2018 set:", nrow(noaa_2018))
noaa_2018 <- noaa_1_county |>
filter(year == 2018)
noaa_2023 <- noaa_1_county |>
filter(year == 2023)
print("Counties in 2018 set:", as.string(nrow(noaa_2018)))
noaa_2018 <- noaa_1_county |>
filter(year == 2018)
noaa_2023 <- noaa_1_county |>
filter(year == 2023)
print("Counties in 2018 set:", as.str(nrow(noaa_2018)))
noaa_2018 <- noaa_1_county |>
filter(year == 2018)
noaa_2023 <- noaa_1_county |>
filter(year == 2023)
print("Counties in 2018 set:", as.character(nrow(noaa_2018)))
print("Counties in 2018 set:", as.character(nrow(noaa_2018)))
noaa_2018 <- noaa_1_county |>
filter(year == 2018)
noaa_2023 <- noaa_1_county |>
filter(year == 2023)
View(noaa_2018)
View(noaa_1_county)
View(noaa_1_county)
main_set <- full_join(census_data, noaa_1_county, join_by(county))
View(main_set)
View(main_set)
main_set <- full_join(census_data, noaa_1_county, join_by(county))
main_set <- main_set |>
select(county, state, total_events, everything(), -state_bad)
main_set <- full_join(census_data, noaa_1_county, join_by(county))
main_set <- main_set |>
select(county, state, total_events, everything(), -state_bad)
head(main_set)
main_set <- full_join(census_data, noaa_1_county, join_by(county))
main_set <- main_set |>
select(county, state, year, total_events, everything(), -state_bad)
head(main_set)
main_set <- full_join(census_data, noaa_1_county, join_by(county))
main_set <- main_set |>
select(county, state, year, total_events, everything(), -state_bad)
head(main_set)
main_set_2018 <- full_join(census_data, noaa_2018, join_by(county))
main_set_2018 <- main_set_2018 |>
select(county, state, year, total_events, everything(), -state_bad)
head(main_set_2018)
View(main_set_2018)
knitr::opts_chunk$set(echo = FALSE)
library(tidycensus)
library(dplyr)
library(tidyr)
library(writexl)
library(readr)
library(stringr)
year_tg <- 2023
# Set your Census API key
census_api_key("3504e2e4186afe0b674a6f3f54caefd9ef3af8d9", install = TRUE, overwrite=TRUE)
#census_api_key("34777786635d1f4f42107118005896f09cde55e1", install = TRUE, overwrite=TRUE)
## Use `load_variables()` function to explore more variables if needed
codelists <- load_variables(year_tg, "acs5", cache = TRUE)
#################################################################################
variables <- c(
HIC_total = "B25141_001E",
HIC_with_mortgage = "B25141_002E",
HIC_with_mortgage_50 = "B25141_003E",
HIC_with_mortgage_200 = "B25141_004E",
HIC_with_mortgage_400 = "B25141_005E",
HIC_with_mortgage_650 = "B25141_006E",
HIC_with_mortgage_900 = "B25141_007E",
HIC_with_mortgage_1250 = "B25141_008E",
HIC_with_mortgage_1750 = "B25141_009E",
HIC_with_mortgage_2250 = "B25141_010E",
HIC_with_mortgage_2750 = "B25141_011E",
HIC_with_mortgage_3250 = "B25141_012E",
HIC_with_mortgage_3750 = "B25141_013E",
HIC_with_mortgage_m4000 = "B25141_014E",
HIC_without_mortgage = "B25141_015E",
HIC_without_mortgage_50 = "B25141_016E",
HIC_without_mortgage_200 = "B25141_017E",
HIC_without_mortgage_400 = "B25141_018E",
HIC_without_mortgage_650 = "B25141_019E",
HIC_without_mortgage_900 = "B25141_020E",
HIC_without_mortgage_1250 = "B25141_021E",
HIC_without_mortgage_1750 = "B25141_022E",
HIC_without_mortgage_2250 = "B25141_023E",
HIC_without_mortgage_2750 = "B25141_024E",
HIC_without_mortgage_3250 = "B25141_025E",
HIC_without_mortgage_3750 = "B25141_026E",
HIC_without_mortgage_m4000 = "B25141_027E",
MOR_total = "B25096_001E",
MOR_with = "B25096_002E",
MOR_with_25000 = "B25096_003E",
MOR_with_75000 = "B25096_004E",
MOR_with_125000 = "B25096_005E",
MOR_with_175000 = "B25096_006E",
MOR_with_250000 = "B25096_007E",
MOR_with_400000 = "B25096_008E",
MOR_with_625000 = "B25096_009E",
MOR_with_875000 = "B25096_010E",
MOR_with_m1000000 = "B25096_011E",
MOR_without = "B25096_012E",
MOR_without_25000 = "B25096_013E",
MOR_without_75000 = "B25096_014E",
MOR_without_125000 = "B25096_015E",
MOR_without_175000 = "B25096_016E",
MOR_without_250000 = "B25096_017E",
MOR_without_400000 = "B25096_018E",
MOR_without_625000 = "B25096_019E",
MOR_without_875000 = "B25096_020E",
MOR_without_m1000000 = "B25096_021E"
)
census_data <- get_acs(
geography = "county",
variables = variables,
year = year_tg,
survey = "acs5", # Use 5-year ACS data
output = "wide"
)
################################
# Extract the variable names
variable_columns <- names(variables)
# Keep only the specified variables and the 'NAME' column for county names
census_data <- census_data %>%
select(NAME, all_of(variable_columns))
# Extracting States and creating a new variable
census_data$state <- sub(".*,\\s*", "", census_data$NAME) # Gets everything after the last comma
census_data$county <- sub(",\\s*[^,]*$", "", census_data$NAME) # Gets everything before the last comma
# Then remove "County" if it exists at the end
census_data$county <- sub(" County$", "", census_data$county)
census_data$county <- sub(" Census Area$", "", census_data$county)
census_data$county <- sub(" Municipio$", "", census_data$county)
census_data$county <- sub(" Parish$", "", census_data$county)
census_data$county <- sub(" Borough$", "", census_data$county)
census_data$county <- sub(" Planning Region$", "", census_data$county)
census_data$county <- sub(" city$", "", census_data$county)
# Move state and county back to the front
census_data <- census_data |>
select(county, state, everything()) |>
select(-"NAME")
noaa_data <- read_csv("Data/county_events.csv")
noaa_data <- noaa_data |>
filter(year == 2018 | year == 2023)
# Adjusting county names for a join
census_data <- census_data |>
mutate(county = str_to_upper(county, locale = "en")) |>
group_by(state) |>
arrange(county, .by_group = TRUE) |>
ungroup()
# Pivoting the NOAA data so each county only appears once
noaa_1_county <- noaa_data |>
pivot_wider(names_from = event_type, values_from = event_count, values_fill = 0,
id_cols = c("county", "state", "year")) |>
rename(state_bad = state) |>
mutate(total_events = rowSums(across(where(is.numeric))) - year) |>
group_by(state_bad) |>
arrange(county, .by_group = TRUE) |>
ungroup() |>
select(county, state_bad, year, total_events, everything())
head(census_data)
head(noaa_1_county)
noaa_2018 <- noaa_1_county |>
filter(year == 2018)
noaa_2023 <- noaa_1_county |>
filter(year == 2023)
# I tried doing a bunch of joins here but they did not work.  Will attempt in class tomorrow.
View(noaa_2018)
